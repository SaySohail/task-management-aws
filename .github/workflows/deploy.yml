name: Deploy & Test
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      RELEASES_BUCKET: ${{ vars.RELEASES_BUCKET }}
      EB_APP: ${{ vars.EB_APP_NAME }}
      EB_ENV: ${{ vars.EB_ENV_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      # Build Next (static) ‚Äî controlled by next.config.js { output: "export" }
      - name: Build frontend
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Prepare server/public
        run: |
          rm -rf server/public
          mkdir -p server/public
          cp -r client/out/* server/public/

      - name: Setup Node.js version for Elastic Beanstalk
        working-directory: server
        run: |
          # Clean up any existing .ebextensions that might cause conflicts
          rm -rf .ebextensions
          
          # Create .platform hooks directory
          mkdir -p .platform/hooks/prebuild
          
          # Create Node.js installation hook
          cat > .platform/hooks/prebuild/01_install_node.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Installing Node.js 20 via nvm ==="
          
          # Install nvm if not present
          if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
          fi
          
          # Source nvm
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Install and use Node.js 20
          nvm install 20
          nvm use 20
          nvm alias default 20
          
          echo "Node version after install: $(node --version)"
          echo "NPM version after install: $(npm --version)"
          
          # Also create .nvmrc as fallback
          echo "20" > /var/app/staging/.nvmrc
          
          echo "=== Node.js 20 installation complete ==="
          EOF
          
          # Make the hook executable
          chmod +x .platform/hooks/prebuild/01_install_node.sh
          
          # Create .nvmrc as additional fallback
          echo "20" > .nvmrc

      - name: Verify deployment structure
        working-directory: server
        run: |
          echo "=== Server directory structure ==="
          ls -la
          echo "=== Platform hooks ==="
          ls -la .platform/hooks/prebuild/ || echo "No prebuild hooks found"
          echo "=== Hook content ==="
          cat .platform/hooks/prebuild/01_install_node.sh || echo "No hook file found"
          echo "=== .nvmrc content ==="
          cat .nvmrc || echo "No .nvmrc found"
          echo "=== Checking for any .ebextensions ==="
          ls -la .ebextensions/ 2>/dev/null || echo "No .ebextensions directory (good)"

      - name: Package backend (server)
        working-directory: server
        run: |
          zip -r ../server-${{ github.sha }}.zip . -x "node_modules/*" ".git/*"

      - name: Sanity print settings
        shell: bash
        run: |
          echo "Region=${AWS_REGION}"
          echo "Bucket=${RELEASES_BUCKET}"
          echo "App=${EB_APP}"
          echo "Env=${EB_ENV}"
          echo "Zip=server-${GITHUB_SHA}.zip"

      - name: Upload app version to S3
        run: |
          aws s3 cp server-${{ github.sha }}.zip s3://$RELEASES_BUCKET/releases/

      - name: Verify S3 object exists
        run: |
          aws s3 ls s3://$RELEASES_BUCKET/releases/server-${{ github.sha }}.zip

      - name: Create EB application version
        run: |
          VERSION_LABEL="${{ github.sha }}-${{ github.run_number }}"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket=$RELEASES_BUCKET,S3Key=releases/server-${{ github.sha }}.zip

      - name: Wait for EB to register version
        shell: bash
        run: |
          set -e
          for i in $(seq 1 30); do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name "$EB_APP" \
              --version-labels "$VERSION_LABEL" \
              --query 'ApplicationVersions[0].Status' \
              --output text 2>/dev/null || echo "MISSING")
            echo "EB version status: $STATUS"
            if [[ "$STATUS" == "FAILED" ]]; then
              echo "EB reported FAILED for version $VERSION_LABEL" >&2
              exit 1
            fi
            if [[ "$STATUS" == "PROCESSED" || "$STATUS" == "UNPROCESSED" ]]; then
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for EB to register version $VERSION_LABEL" >&2
          exit 1

      - name: Deploy to EB environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV" \
            --version-label "$VERSION_LABEL"

      - name: Wait for deployment to complete
        shell: bash
        run: |
          set -e
          echo "Waiting for deployment to complete..."
          
          for i in $(seq 1 60); do  # Wait up to 30 minutes (60 * 30 seconds)
            ENV_STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].Status' \
              --output text 2>/dev/null || echo "ERROR")
              
            ENV_HEALTH=$(aws elasticbeanstalk describe-environments \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].Health' \
              --output text 2>/dev/null || echo "ERROR")
            
            echo "Environment Status: $ENV_STATUS, Health: $ENV_HEALTH"
            
            # Check if deployment failed
            if [[ "$ENV_STATUS" == "Ready" && ("$ENV_HEALTH" == "Severe" || "$ENV_HEALTH" == "Red") ]]; then
              echo "‚ùå Deployment failed - Environment is Ready but Health is $ENV_HEALTH"
              
              # Get recent events to show what went wrong
              echo "Recent events:"
              aws elasticbeanstalk describe-events \
                --environment-name "$EB_ENV" \
                --start-time $(date -d '10 minutes ago' -Iseconds) \
                --query 'Events[?Severity==`ERROR`].[EventDate,Message]' \
                --output table
              
              exit 1
            fi
            
            # Check if deployment succeeded
            if [[ "$ENV_STATUS" == "Ready" && ("$ENV_HEALTH" == "Ok" || "$ENV_HEALTH" == "Info" || "$ENV_HEALTH" == "Green") ]]; then
              echo "‚úÖ Deployment completed successfully!"
              
              # Verify the version was deployed
              DEPLOYED_VERSION=$(aws elasticbeanstalk describe-environments \
                --environment-names "$EB_ENV" \
                --query 'Environments[0].VersionLabel' \
                --output text 2>/dev/null || echo "ERROR")
              echo "Deployed version: $DEPLOYED_VERSION"
              
              if [[ "$DEPLOYED_VERSION" == "None" || "$DEPLOYED_VERSION" == "null" || "$DEPLOYED_VERSION" == "ERROR" ]]; then
                echo "‚ö†Ô∏è  Unable to verify version label, but deployment appears successful"
                echo "‚úÖ Deployment completed - health is $ENV_HEALTH"
                exit 0
              elif [[ "$DEPLOYED_VERSION" == "$VERSION_LABEL" ]]; then
                echo "‚úÖ Correct version deployed: $VERSION_LABEL"
                exit 0
              else
                echo "‚ö†Ô∏è  Version mismatch but deployment succeeded. Expected: $VERSION_LABEL, Got: $DEPLOYED_VERSION"
                echo "‚úÖ Deployment completed - health is $ENV_HEALTH"
                exit 0
              fi
            fi
            
            # Still deploying or other states
            if [[ "$ENV_STATUS" == "Updating" ]]; then
              echo "üîÑ Deployment in progress..."
            elif [[ "$ENV_STATUS" == "Ready" && ("$ENV_HEALTH" == "Yellow" || "$ENV_HEALTH" == "Warning") ]]; then
              echo "‚ö†Ô∏è  Environment is Ready but health is $ENV_HEALTH - continuing to wait..."
            else
              echo "‚ö†Ô∏è  Status: $ENV_STATUS, Health: $ENV_HEALTH - continuing to monitor..."
            fi
            
            sleep 30
          done
          
          echo "‚ùå Deployment timed out after 30 minutes"
          exit 1

  api-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm i -g newman
      - name: Run Postman (Newman)
        run: |
          newman run postman/collection.json \
            -e postman/env.staging.json \
            --env-var baseUrl=${{ vars.POSTMAN_API_BASE }}

  e2e:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install client deps
        run: npm ci --prefix client

      - name: Run Cypress
        uses: cypress-io/github-action@v6
        with:
          install: false
          command: npm run cy:run --prefix client
        env:
          CYPRESS_BASE_URL: ${{ vars.CYPRESS_BASE_URL }}