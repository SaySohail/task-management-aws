name: Deploy & Test
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      RELEASES_BUCKET: ${{ vars.RELEASES_BUCKET }}
      EB_APP: ${{ vars.EB_APP_NAME }}
      EB_ENV: ${{ vars.EB_ENV_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      # Build Next (static) â€” controlled by next.config.js { output: "export" }
      - name: Build frontend
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Prepare server/public
        run: |
          rm -rf server/public
          mkdir -p server/public
          cp -r client/out/* server/public/

      - name: Package backend (server)
        working-directory: server
        run: |
          zip -r ../server-${{ github.sha }}.zip . -x "node_modules/*" ".git/*"

      - name: Sanity print settings
        shell: bash
        run: |
          echo "Region=${AWS_REGION}"
          echo "Bucket=${RELEASES_BUCKET}"
          echo "App=${EB_APP}"
          echo "Env=${EB_ENV}"
          echo "Zip=server-${GITHUB_SHA}.zip"

      - name: Upload app version to S3
        run: |
          aws s3 cp server-${{ github.sha }}.zip s3://$RELEASES_BUCKET/releases/

      - name: Verify S3 object exists
        run: |
          aws s3 ls s3://$RELEASES_BUCKET/releases/server-${{ github.sha }}.zip

      - name: Create EB application version
        run: |
          VERSION_LABEL="${{ github.sha }}-${{ github.run_number }}"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket=$RELEASES_BUCKET,S3Key=releases/server-${{ github.sha }}.zip

      - name: Wait for EB to register version
        shell: bash
        run: |
          set -e
          for i in $(seq 1 30); do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name "$EB_APP" \
              --version-labels "$VERSION_LABEL" \
              --query 'ApplicationVersions[0].Status' \
              --output text 2>/dev/null || echo "MISSING")
            echo "EB version status: $STATUS"
            if [[ "$STATUS" == "FAILED" ]]; then
              echo "EB reported FAILED for version $VERSION_LABEL" >&2
              exit 1
            fi
            if [[ "$STATUS" == "PROCESSED" || "$STATUS" == "UNPROCESSED" ]]; then
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for EB to register version $VERSION_LABEL" >&2
          exit 1

      - name: Deploy to EB environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV" \
            --version-label "$VERSION_LABEL"

  api-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm i -g newman
      - name: Run Postman (Newman)
        run: |
          newman run postman/collection.json \
            -e postman/env.staging.json \
            --env-var baseUrl=${{ vars.POSTMAN_API_BASE }}

  e2e:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install client deps
        run: npm ci --prefix client

      - name: Run Cypress
        uses: cypress-io/github-action@v6
        with:
          install: false
          command: npm run cy:run --prefix client
        env:
          CYPRESS_BASE_URL: ${{ vars.CYPRESS_BASE_URL }}

